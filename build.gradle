plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

java {
    withSourcesJar()
}

base {
    archivesName = modid_short + "-${mcversion}"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

minecraft {
    mappings channel: mappingsch, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory file('run')
            arg "-mixin.config=${modid}.${mixin_file_suffix}"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.jline', 'true'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {}
    }
}

mixin {
    config "${modid}.${mixin_file_suffix}"
    add sourceSets.main, "${modid}.${mixin_refmap_suffix}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcversion}-${fgversion}"
    annotationProcessor "net.fabricmc:sponge-mixin:${fabric_mixin_version}+mixin.${mixin_version}"

    // JARJAR MIXIN EXTRA
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinextra_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixinextra_version}")) {
        jarJar.ranged(it, mixinextra_version_range)
    }

    // DEPENDENCIES
    implementation fg.deobf("org.embeddedt:embeddium-${mcversion}:${embeddiumversion}")
    implementation fg.deobf("curse.maven:jei-238222:${jeiversion}")
    runtimeOnly fg.deobf("curse.maven:oculus-581495:${oculusversion}")

    // UTILITY FOR FAST LOADING AND IN-DEV COMPAT RESOLUTIONS
    runtimeOnly fg.deobf("curse.maven:worldedit-225608:${worldeditversion}")
    runtimeOnly fg.deobf("curse.maven:ferritecore-429235:${ferritecoreversion}")
    runtimeOnly fg.deobf("curse.maven:fastload-630620:${fastloadversion}")
    runtimeOnly fg.deobf("curse.maven:spark-361579:${sparkversion}")
}

tasks.processResources.outputs.upToDateWhen { false }
tasks.named('processResources', ProcessResources).configure {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', "${modid}.${mixin_file_suffix}".toString()]) {
        expand project.properties
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": modid,
                "Specification-Vendor": modauthors,
                "Specification-Version": version,
                "Implementation-Title": modname,
                "Implementation-Version": version,
                "Implementation-Vendor": modauthors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.${mixin_file_suffix}"
        ])
    }
    archiveClassifier = 'slim'
    finalizedBy 'reobfJar'
}

jarJar.enable()

tasks.jarJar.finalizedBy('reobfJarJar')
tasks.jarJar.archiveClassifier = ''

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}