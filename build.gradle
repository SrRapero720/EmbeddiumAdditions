plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

java {
    withSourcesJar()
}

base {
    archivesName = modid
    version = "mc${mcversion}-v${version}"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

minecraft {
    mappings channel: mappingsch, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true
    // folderName = "example_mod"

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory file('run')
            arg "-mixin.config=${modid}.${mixin_file_suffix}"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'terminal.jline', 'true'
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', modid
        }

        server {
            property 'forge.enabledGameTestNamespaces', modid
            args '--nogui'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', modid, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    config "${modid}.${mixin_file_suffix}"
    add sourceSets.main, "${modid}.${mixin_refmap_suffix}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://www.cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven { url "https://repo.spongepowered.org/maven" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://maven.fabricmc.net/" }
    maven { url 'https://jitpack.io' }
}

configurations {
    shadeLibrary
    implementation.extendsFrom shadeLibrary
}

/* TELLS FORGE TO IDENTIFY LIBRARY CLASSES  */
minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.shadeLibrary.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mcversion}-${fgversion}"
    annotationProcessor "net.fabricmc:sponge-mixin:${fabric_mixin_version}+mixin.${mixin_version}"

    // JARJAR MIXIN EXTRA
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:${mixinextra_version}"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:${mixinextra_version}")) {
        jarJar.ranged(it, mixinextra_version_range)
    }

    // UTILITY FOR FAST LOADING AND IN-DEV COMPAT RESOLUTIONS
    runtimeOnly fg.deobf("curse.maven:jei-238222:${jeiversion}")
    runtimeOnly fg.deobf("curse.maven:oculus-581495:${oculusversion}")
    runtimeOnly fg.deobf("org.embeddedt:embeddium-${mcversion}:${embeddiumversion}")
    runtimeOnly fg.deobf("curse.maven:worldedit-225608:${worldeditversion}")
    runtimeOnly fg.deobf("curse.maven:ferritecore-429235:${ferritecoreversion}")
    runtimeOnly fg.deobf("curse.maven:fastload-630620:${fastloadversion}")
    runtimeOnly fg.deobf("curse.maven:spark-361579:${sparkversion}")

    // Quick example
    // implementation fg.deobf("curse.maven:00000-00000")

    // Quick shadow example
    // shadeLibrary "com.google:gson:2.0"
}

// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
tasks.processResources.outputs.upToDateWhen { false }
tasks.named('processResources', ProcessResources).configure {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta', "${modid}.${mixin_file_suffix}".toString()]) {
        expand project.properties
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": modid,
                "Specification-Vendor": modauthors,
                "Specification-Version": version,
                "Implementation-Title": modname,
                "Implementation-Version": version,
                "Implementation-Vendor": modauthors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.${mixin_file_suffix}"
        ])
    }
    from {
        configurations.library.collect {
            it.isDirectory() ? it.matching {
                exclude '*', 'META-INF/**'
            } : zipTree(it).matching {
                exclude '*', 'META-INF/**'
            }
        }
    }
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

//tasks.build.dependsOn shadowJar
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}